// Generated by CoffeeScript 1.6.3
(function() {
  var AMobile, AScene, Battle, BattlePool, Bezier, BigCastleConditionChecker, BubbleManager, Building, BuildingFactory, BuildingFlag, Castle, CastleBig, CastleConditionChecker, ColorArea, ConstructionArea, ConstructionAreaBig, Country, CubicBezier, Difficulty, DisplayController, DwarfSoldier, DwarfVillage, ErrorLineMsg, Explosion, Game, GameEndChecker, GameScene, HitTest, IAController, InteractiveController, King, Line, LineCost, LineCreation, LineGBox, LoadScene, Main, Map, Mine, MineConditionChecker, MobileFactory, MobileState, MoneyAnimation, Monster, NotEnoughtMoneyMsg, NumberUtils, ObjectPool, Point, SceneTraveler, Shadow, ShapeCreation, Snake, Soldier, SoundManager, StartScene, StoryManager, TAN_HALF_PI, Test01, TileFlag, Village, VillageConditionChecker, VisualLine, add, angle, angle_between, average, delta, findCorner, isSquare, isTriangle, len, main, vector,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Battle = (function(_super) {
    __extends(Battle, _super);

    function Battle() {
      this.dispose = __bind(this.dispose, this);
      var textures;
      textures = [new PIXI.Texture.fromImage("./img/attack_B01.png"), new PIXI.Texture.fromImage("./img/attack_B02.png"), new PIXI.Texture.fromImage("./img/attack_B03.png"), new PIXI.Texture.fromImage("./img/attack_B04.png"), new PIXI.Texture.fromImage("./img/attack_B05.png"), new PIXI.Texture.fromImage("./img/attack_B06.png"), new PIXI.Texture.fromImage("./img/attack_B07.png"), new PIXI.Texture.fromImage("./img/attack_B08.png"), new PIXI.Texture.fromImage("./img/attack_B09.png"), new PIXI.Texture.fromImage("./img/attack_B10.png")];
      Battle.__super__.constructor.call(this, textures);
      this.onComplete = this.dispose;
      this.loop = false;
      this.gotoAndPlay(0);
      this.animationSpeed = .25;
      this.anchor.x = .5;
      this.anchor.y = .5;
      return;
    }

    Battle.prototype.dispose = function() {
      this.stop();
      this.visible = false;
      return BattlePool.getInstance().checkIn(this);
    };

    return Battle;

  })(PIXI.MovieClip);

  BattlePool = (function() {
    function BattlePool() {}

    BattlePool.instance = null;

    BattlePool.getInstance = function() {
      if (BattlePool.instance === null) {
        BattlePool.instance = new ObjectPool(function() {
          return new Battle();
        }, 30, 50);
      }
      return BattlePool.instance;
    };

    return BattlePool;

  })();

  Building = (function(_super) {
    __extends(Building, _super);

    Building.prototype.owner = null;

    Building.prototype.life = 10;

    Building.prototype.name = "";

    Building.prototype.area = null;

    Building.prototype.state = "";

    function Building(owner, texture) {
      this.owner = owner;
      Building.__super__.constructor.call(this, texture);
      this.name = "";
      this.state = BuildingFlag.Construct;
      this.anchor.x = .5;
      this.anchor.y = 1;
      this.position.y = 26;
      return;
    }

    Building.prototype.update = function(dt) {};

    Building.prototype.animIn = function(delay) {
      if (this.owner === Country.Dots && window.IS_CHROME) {
        SoundManager.instance.play("./sounds/construction.mp3");
      }
      this.alpha = 0.7;
      this.scale.x = 0;
      this.scale.y = 0;
      TweenLite.to(this, .4, {
        alpha: 1,
        delay: delay
      });
      TweenLite.to(this.scale, .5, {
        x: 1,
        y: 1,
        delay: delay,
        ease: Back.easeOut
      });
    };

    Building.prototype.damage = function(amount) {
      var explosion;
      if (this.life <= 0) {
        return;
      }
      this.life -= amount;
      if (window.IS_CHROME) {
        SoundManager.instance.playWithVolume("./sounds/attack" + NumberUtils.addZero(Math.floor(Math.random() * 9), 2) + ".mp3", .15);
      }
      if (this.life === 0) {
        this.destroy();
      }
      explosion = new Explosion();
      explosion.position.x = Math.random() * 30 - 15;
      explosion.position.y = -Math.random() * 60;
      this.addChild(explosion);
      this.scale.x = 1;
      this.scale.y = 1;
      TweenLite.to(this.scale, .05, {
        x: 1.1,
        y: 1.1
      });
      TweenLite.to(this.scale, .05, {
        x: 1,
        y: 1,
        delay: .5
      });
    };

    Building.prototype.destroy = function() {
      this.area.removeBuilding();
      if (window.IS_CHROME) {
        SoundManager.instance.play("./sounds/explosion.mp3");
      }
      TweenLite.killTweensOf(this.scale);
      TweenLite.to(this.scale, .4, {
        x: 0.8,
        y: 0.8,
        ease: Back.easeIn
      });
      return TweenLite.to(this, .4, {
        alpha: 0,
        onComplete: this.dispose
      });
    };

    Building.prototype.isDestroy = function() {
      return life > 0;
    };

    Building.prototype.dispose = function() {
      if (this.parent) {
        return this.parent.removeChild(this);
      }
    };

    return Building;

  })(PIXI.Sprite);

  BuildingFlag = (function() {
    function BuildingFlag() {}

    BuildingFlag.None = 0x000000;

    BuildingFlag.Construct = 0x000001;

    BuildingFlag.Destroy = 0x000002;

    return BuildingFlag;

  })();

  BuildingFactory = (function() {
    function BuildingFactory() {
      return;
    }

    BuildingFactory.withData = function(r, g, b, a) {
      var area, castle, mine, monster, village;
      if (r === 0xFF && g === 0xF0 && b === 0) {
        return new ConstructionArea();
      } else if (r === 0 && g === 0 && b === 0xFF) {
        area = new ConstructionArea();
        castle = new Castle(Country.Square);
        area.add(castle);
        return area;
      } else if (r === 0x66 && g === 0 && b === 0xFF) {
        area = new ConstructionArea();
        mine = new Mine(Country.Square);
        area.add(mine);
        return area;
      } else if (r === 0xFF && g === 0 && b === 0xCC) {
        area = new ConstructionArea();
        village = new Village(Country.Square);
        area.add(village);
        return area;
      } else if (r === 0x99 && g === 0x99 && b === 0xFF) {
        area = new ConstructionAreaBig();
        castle = new CastleBig(Country.Square);
        area.add(castle);
        return area;
      } else if (r === 0x99 && g === 0xFF && b === 0xCC) {
        area = new ConstructionAreaBig();
        monster = new Monster();
        area.add(monster);
        return area;
      } else if (r === 0x66 && g === 0x66 && b === 0x33) {
        area = new ConstructionAreaBig();
        monster = new Snake();
        area.add(monster);
        return area;
      } else if (r === 0xFF && g === 0x99 && b === 0x99) {
        area = new ConstructionAreaBig();
        village = new DwarfVillage();
        area.add(village);
        return area;
      }
      return null;
    };

    return BuildingFactory;

  })();

  Castle = (function(_super) {
    __extends(Castle, _super);

    Castle.prototype.lastUnit = 0;

    Castle.prototype.unitDuration = 100;

    Castle.prototype.units = null;

    Castle.prototype.line = null;

    Castle.prototype.maxUnit = 10;

    Castle.prototype.lastTick = 0;

    Castle.prototype.tickDuration = 9000;

    function Castle(owner, texture) {
      if (texture == null) {
        texture = null;
      }
      if (owner === Country.Dots) {
        if (texture == null) {
          texture = PIXI.Texture.fromImage("./img/castle_A.png");
        }
      } else if (owner === Country.Square) {
        if (texture == null) {
          texture = PIXI.Texture.fromImage("./img/castle_B1.png");
        }
      }
      Castle.__super__.constructor.call(this, owner, texture);
      if (owner === Country.Square) {
        this.position.y = 20;
      }
      this.name = "castle";
      this.life = 20;
      this.units = new Array();
      this.lastUnit = this.unitDuration;
      return;
    }

    Castle.prototype.setLine = function(points, draw) {
      if (draw == null) {
        draw = true;
      }
      if (this.line) {
        this.line.fadeOut();
      }
      this.line = new Line(points, 0xed0060);
      if (draw) {
        Game.stage.addChild(this.line);
      }
    };

    Castle.prototype.update = function(dt) {
      var unit, _i, _len, _ref;
      if (this.state & BuildingFlag.Destroy) {
        return;
      }
      if (this.line !== null) {
        this.line.update(dt);
      }
      this.lastUnit -= dt;
      if (this.lastUnit <= 0) {
        this.lastUnit = this.unitDuration;
        if (this.line !== null) {
          _ref = this.units;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            unit = _ref[_i];
            if (unit.isWaiting) {
              unit.followLine(this.line.points);
              return;
            }
          }
        }
        this.createUnit();
      }
      if (this.owner !== Country.Dots) {
        return;
      }
      this.lastTick -= dt;
      if (this.lastTick <= 0) {
        this.lastTick = this.tickDuration;
        this.addMoney();
      }
    };

    Castle.prototype.createUnit = function() {
      var b, unit, x, y, _i, _len, _ref;
      if (this.units.length >= this.maxUnit) {
        return;
      }
      if (this.line === null) {
        b = 0;
        _ref = this.units;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          unit = _ref[_i];
          if (unit.state === MobileState.Waiting) {
            b += 15;
          }
        }
        x = this.parent.position.x + Math.cos((5 + b) * Math.PI / 180) * 45 - 4;
        y = this.parent.position.y + Math.sin((5 + b) * Math.PI / 180) * 26;
      } else {
        x = this.line.points[0].x;
        y = this.line.points[0].y;
      }
      unit = new Soldier(this.owner, this);
      unit.position.x = this.parent.position.x;
      unit.position.y = this.parent.position.y;
      unit.moveTo(x, y);
      this.units.push(unit);
      if (this.line === null) {
        unit.state = MobileState.Waiting;
      } else {
        unit.followLine(this.line.points);
      }
      Game.instance.addMobile(unit);
    };

    Castle.prototype.removeLine = function() {
      if (this.line) {
        this.line.fadeOut();
        this.line = null;
      }
    };

    Castle.prototype.removeUnit = function(unit) {
      var idx;
      idx = this.units.indexOf(unit);
      this.units.splice(idx, 1);
      unit = null;
    };

    Castle.prototype.destroy = function() {
      var i, owner, unit, _i, _ref;
      Castle.__super__.destroy.apply(this, arguments);
      if (owner = Country.Square) {
        IAController.instance.removeCastle(this);
      }
      for (i = _i = _ref = this.units.length - 1; _i >= 0; i = _i += -1) {
        unit = this.units[i];
        unit.onDie();
      }
      if (this.line !== null) {
        this.line.fadeOut();
        this.line = null;
      }
      this.state += BuildingFlag.Destroy;
    };

    Castle.prototype.addMoney = function() {
      var anim;
      Game.instance.lineG += 5;
      anim = new MoneyAnimation(5);
      this.addChild(anim);
    };

    return Castle;

  })(Building);

  CastleBig = (function(_super) {
    __extends(CastleBig, _super);

    function CastleBig(owner) {
      var texture;
      texture = PIXI.Texture.fromImage("./img/castle_B2.png");
      CastleBig.__super__.constructor.call(this, owner, texture);
      this.life = 100;
      this.name = "bigCastle";
    }

    return CastleBig;

  })(Castle);

  ConstructionArea = (function(_super) {
    __extends(ConstructionArea, _super);

    ConstructionArea.prototype.building = null;

    ConstructionArea.prototype.color = null;

    function ConstructionArea(texture) {
      if (texture == null) {
        texture = PIXI.Texture.fromImage("./img/empty_s.png");
      }
      ConstructionArea.__super__.constructor.call(this, texture);
      this.anchor.x = .5;
      this.anchor.y = .5;
      return;
    }

    ConstructionArea.prototype.build = function(building) {
      this.add(building);
      building.animIn();
    };

    ConstructionArea.prototype.add = function(building) {
      this.building = building;
      if (this.building.owner === Country.Dots || this.building.owner === Country.Square) {
        this.color = new ColorArea(building.owner);
        this.addChild(this.color);
      }
      building.area = this;
      this.addChild(building);
    };

    ConstructionArea.prototype.removeBuilding = function() {
      var e;
      if (this.color !== null) {
        try {
          this.color.remove();
          this.color = null;
        } catch (_error) {
          e = _error;
        }
      }
      this.removeChild(this.building);
      this.building.area = null;
      return this.building = null;
    };

    ConstructionArea.prototype.update = function(dt) {
      if (this.building !== null) {
        return this.building.update(dt);
      }
    };

    ConstructionArea.prototype.hitTest = function(x, y) {
      return HitTest.testElipse(new Point(x, y), this, 40, 25);
    };

    return ConstructionArea;

  })(PIXI.Sprite);

  ConstructionAreaBig = (function(_super) {
    __extends(ConstructionAreaBig, _super);

    function ConstructionAreaBig() {
      ConstructionAreaBig.__super__.constructor.call(this, PIXI.Texture.fromImage("./img/empty_s.png"));
      return;
    }

    ConstructionAreaBig.prototype.hitTest = function(x, y) {
      return HitTest.testElipse(new Point(x, y), this, 60, 45);
    };

    return ConstructionAreaBig;

  })(ConstructionArea);

  DwarfVillage = (function(_super) {
    __extends(DwarfVillage, _super);

    function DwarfVillage() {
      DwarfVillage.__super__.constructor.call(this, Country.Triangle, PIXI.Texture.fromImage("./img/triangle_house_A.png"));
      this.position.y = 14;
      this.name = "dwarf";
      return;
    }

    return DwarfVillage;

  })(Castle);

  Mine = (function(_super) {
    __extends(Mine, _super);

    Mine.prototype.lastTick = 0;

    Mine.prototype.tickDuration = 1000;

    function Mine(owner) {
      if (owner === Country.Dots) {
        Mine.__super__.constructor.call(this, owner, PIXI.Texture.fromImage("./img/mine.png"));
      } else {
        Mine.__super__.constructor.call(this, owner, PIXI.Texture.fromImage("./img/mine_square.png"));
      }
      this.position.y = 12;
      this.lastUnit = this.tickDuration;
      this.name = "mine";
      return;
    }

    Mine.prototype.update = function(dt) {
      if (this.owner !== Country.Dots) {
        return;
      }
      this.lastTick -= dt;
      if (this.lastTick <= 0) {
        this.lastTick = this.tickDuration;
        this.addMoney();
      }
    };

    Mine.prototype.addMoney = function() {
      var anim;
      Game.instance.lineG += 10;
      anim = new MoneyAnimation(10);
      this.addChild(anim);
    };

    return Mine;

  })(Building);

  Monster = (function(_super) {
    __extends(Monster, _super);

    Monster.prototype.owner = null;

    Monster.prototype.life = 10;

    Monster.prototype.name = "";

    Monster.prototype.area = null;

    Monster.prototype.state = "";

    Monster.prototype.rotateTick = 0;

    function Monster(textures) {
      if (textures == null) {
        textures = [PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga1.png"), PIXI.Texture.fromImage("./img/orga2.png"), PIXI.Texture.fromImage("./img/orga2.png"), PIXI.Texture.fromImage("./img/orga2.png"), PIXI.Texture.fromImage("./img/orga2.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png"), PIXI.Texture.fromImage("./img/orga3.png")];
      }
      Monster.__super__.constructor.call(this, textures);
      this.loop = true;
      this.life = 50;
      this.anchor.x = .5;
      this.anchor.y = .5;
      this.position.y = -12;
      this.position.x = 0;
      this.gotoAndPlay(Math.random() * textures.length);
      this.rotateTick = 3000 * Math.random();
      this.animationSpeed = .4;
      this.owner = Country.Monster;
      this.name = "monster";
      return;
    }

    Monster.prototype.update = function(dt) {
      this.rotateTick += dt;
      if (this.rotateTick > 3000 && Math.random() > .98) {
        this.rotateTick = 0;
        this.scale.x *= -1;
      }
    };

    Monster.prototype.animIn = function(delay) {
      this.alpha = 0.7;
      this.scale.x = 0;
      this.scale.y = 0;
      TweenLite.to(this, .4, {
        alpha: 1,
        delay: delay
      });
      TweenLite.to(this.scale, .5, {
        x: 1,
        y: 1,
        delay: delay,
        ease: Back.easeOut
      });
    };

    Monster.prototype.damage = function(amount) {
      var explosion;
      if (this.life <= 0) {
        return;
      }
      this.life -= amount;
      if (this.life === 0) {
        this.destroy();
      }
      explosion = new Explosion();
      explosion.position.x = Math.random() * 30 - 15;
      explosion.position.y = -Math.random() * 45;
      this.addChild(explosion);
      this.scale.x = 1;
      this.scale.y = 1;
      TweenLite.to(this.scale, .05, {
        x: 1.1,
        y: 1.1
      });
      TweenLite.to(this.scale, .05, {
        x: 1,
        y: 1,
        delay: .5
      });
    };

    Monster.prototype.destroy = function() {
      var anim;
      this.stop;
      anim = new MoneyAnimation(200, this.area.position.x, this.area.position.y);
      Game.instance.lineG += 200;
      Game.stage.addChild(anim);
      this.area.removeBuilding();
      TweenLite.killTweensOf(this.scale);
      TweenLite.to(this.scale, .4, {
        x: 0.8,
        y: 0.8,
        ease: Back.easeIn
      });
      return TweenLite.to(this, .4, {
        alpha: 0,
        onComplete: this.dispose
      });
    };

    Monster.prototype.isDestroy = function() {
      return life > 0;
    };

    Monster.prototype.dispose = function() {
      if (this.parent) {
        return this.parent.removeChild(this);
      }
    };

    return Monster;

  })(PIXI.MovieClip);

  Snake = (function(_super) {
    __extends(Snake, _super);

    Snake.prototype.rotateTick = 0;

    function Snake() {
      var textures;
      textures = [PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake1.png"), PIXI.Texture.fromImage("./img/snake2.png"), PIXI.Texture.fromImage("./img/snake2.png"), PIXI.Texture.fromImage("./img/snake2.png"), PIXI.Texture.fromImage("./img/snake2.png"), PIXI.Texture.fromImage("./img/snake2.png"), PIXI.Texture.fromImage("./img/snake2.png"), PIXI.Texture.fromImage("./img/snake2.png"), PIXI.Texture.fromImage("./img/snake2.png"), PIXI.Texture.fromImage("./img/snake3.png"), PIXI.Texture.fromImage("./img/snake3.png"), PIXI.Texture.fromImage("./img/snake3.png"), PIXI.Texture.fromImage("./img/snake3.png"), PIXI.Texture.fromImage("./img/snake3.png"), PIXI.Texture.fromImage("./img/snake3.png"), PIXI.Texture.fromImage("./img/snake3.png"), PIXI.Texture.fromImage("./img/snake3.png"), PIXI.Texture.fromImage("./img/snake4.png"), PIXI.Texture.fromImage("./img/snake4.png"), PIXI.Texture.fromImage("./img/snake4.png"), PIXI.Texture.fromImage("./img/snake4.png"), PIXI.Texture.fromImage("./img/snake4.png"), PIXI.Texture.fromImage("./img/snake4.png")];
      Snake.__super__.constructor.call(this, textures);
      this.position.y = 0;
      this.position.x = 0;
      this.animationSpeed = 1;
      this.name = "monster";
      return;
    }

    Snake.prototype.update = function(dt) {};

    Snake.prototype.animIn = function(delay) {
      this.alpha = 0.7;
      this.scale.x = 0;
      this.scale.y = 0;
      TweenLite.to(this, .4, {
        alpha: 1,
        delay: delay
      });
      TweenLite.to(this.scale, .5, {
        x: 1,
        y: 1,
        delay: delay,
        ease: Back.easeOut
      });
    };

    Snake.prototype.damage = function(amount) {
      var explosion;
      if (this.life <= 0) {
        return;
      }
      this.life -= amount;
      if (this.life === 0) {
        this.destroy();
      }
      explosion = new Explosion();
      explosion.position.x = Math.random() * 30 - 15;
      explosion.position.y = -Math.random() * 60;
      this.addChild(explosion);
      this.scale.x = 1;
      this.scale.y = 1;
      TweenLite.to(this.scale, .05, {
        x: 1.1,
        y: 1.1
      });
      TweenLite.to(this.scale, .05, {
        x: 1,
        y: 1,
        delay: .5
      });
    };

    Snake.prototype.destroy = function() {
      var anim;
      this.stop;
      anim = new MoneyAnimation(200, this.area.position.x, this.area.position.y);
      Game.instance.lineG += 200;
      Game.stage.addChild(anim);
      this.area.removeBuilding();
      TweenLite.killTweensOf(this.scale);
      TweenLite.to(this.scale, .4, {
        x: 0.8,
        y: 0.8,
        ease: Back.easeIn
      });
      return TweenLite.to(this, .4, {
        alpha: 0,
        onComplete: this.dispose
      });
    };

    Snake.prototype.isDestroy = function() {
      return life > 0;
    };

    Snake.prototype.dispose = function() {
      if (this.parent) {
        return this.parent.removeChild(this);
      }
    };

    return Snake;

  })(Monster);

  Village = (function(_super) {
    __extends(Village, _super);

    function Village(owner) {
      Village.__super__.constructor.call(this, owner, PIXI.Texture.fromImage("./img/village.png"));
      this.name = "village";
      this.position.y = 14;
      return;
    }

    Village.prototype.update = function(dt) {};

    return Village;

  })(Building);

  Country = (function() {
    function Country() {}

    Country.None = 0x000000;

    Country.Dots = 0x000001;

    Country.Square = 0x000002;

    Country.Viking = 0x000004;

    Country.Triangle = 0x000008;

    Country.Monster = 0x000010;

    return Country;

  })();

  BubbleManager = (function() {
    BubbleManager.prototype.maxBubble = 20;

    BubbleManager.prototype.bubbles = null;

    function BubbleManager() {
      var bubbles;
      bubbles = new Array(20);
      return;
    }

    return BubbleManager;

  })();

  ColorArea = (function(_super) {
    __extends(ColorArea, _super);

    function ColorArea(owner) {
      if (owner === Country.Dots) {
        ColorArea.__super__.constructor.call(this, PIXI.Texture.fromImage("./img/base_dot_s.png"));
      } else if (owner === Country.Square) {
        ColorArea.__super__.constructor.call(this, PIXI.Texture.fromImage("./img/base_square_s.png"));
      }
      this.alpha = 0;
      this.anchor.x = .5;
      this.anchor.y = .5;
      TweenLite.to(this, 3, {
        alpha: 1
      });
      return;
    }

    ColorArea.prototype.remove = function() {
      TweenLite.to(this, 3, {
        alpha: 0,
        onComplete: this.dispose
      });
    };

    ColorArea.prototype.dispose = function() {
      if (this.parent) {
        return this.parent.removeChild(this);
      }
    };

    return ColorArea;

  })(PIXI.Sprite);

  ErrorLineMsg = (function(_super) {
    __extends(ErrorLineMsg, _super);

    function ErrorLineMsg() {
      this.dispose = __bind(this.dispose, this);
      ErrorLineMsg.__super__.constructor.call(this, PIXI.Texture.fromImage("./img/attention.png"));
      this.alpha = 0;
      this.anchor.x = .5;
      this.anchor.y = .5;
      this.scale.x = .8;
      this.scale.y = .8;
      TweenLite.to(this.scale, .5, {
        x: 1,
        y: 1,
        ease: Back.easeOut
      });
      TweenLite.to(this, .4, {
        alpha: 1
      });
      TweenLite.to(this, .4, {
        alpha: 0,
        delay: 2
      });
      TweenLite.to(this.scale, .5, {
        x: .8,
        y: .8,
        ease: Back.easeIn,
        delay: 2,
        onComplete: this.dispose
      });
    }

    ErrorLineMsg.prototype.dispose = function() {
      if (this.parent) {
        return this.parent.removeChild(this);
      }
    };

    return ErrorLineMsg;

  })(PIXI.Sprite);

  Explosion = (function(_super) {
    __extends(Explosion, _super);

    function Explosion() {
      this.dispose = __bind(this.dispose, this);
      Explosion.__super__.constructor.call(this, PIXI.Texture.fromImage("./img/attack_A.png"));
      this.anchor.x = .5;
      this.anchor.y = .5;
      this.scale.x = 0;
      this.scale.y = 0;
      TweenLite.to(this.scale, .3, {
        x: 1,
        y: 1
      });
      TweenLite.to(this, .3, {
        alpha: 0,
        onComplete: this.dispose
      });
      return;
    }

    Explosion.prototype.dispose = function() {
      if (this.parent) {
        return this.parent.removeChild(this);
      }
    };

    return Explosion;

  })(PIXI.Sprite);

  Line = (function(_super) {
    __extends(Line, _super);

    Line.prototype.points = null;

    Line.prototype.color = 0;

    Line.prototype.state = 0;

    Line.prototype.distance = 0;

    function Line(points, color) {
      this.points = points;
      this.color = color;
      Line.__super__.constructor.apply(this, arguments);
      this.state = 1;
      return;
    }

    Line.prototype.update = function(dt) {
      var distance, distanceAvaible, i, moveX, moveY, p, percent, vectorX, vectorY, _i, _ref;
      if (this.state !== 1) {
        return;
      }
      this.distance += dt * .3;
      this.clear();
      this.lineStyle(3, 0xed0060, .05);
      this.moveTo(this.points[0].x, this.points[0].y);
      distanceAvaible = this.distance;
      p = this.points[0];
      for (i = _i = 1, _ref = this.points.length; _i < _ref; i = _i += 1) {
        moveX = this.points[i].x - this.points[i - 1].x;
        moveY = this.points[i].y - this.points[i - 1].y;
        distance = Math.abs(moveX) + Math.abs(moveY);
        if (distance < distanceAvaible) {
          this.lineTo(this.points[i].x, this.points[i].y);
          distanceAvaible -= distance;
        } else {
          percent = distanceAvaible / distance;
          vectorX = (this.points[i].x - this.points[i - 1].x) * percent + this.points[i - 1].x;
          vectorY = (this.points[i].y - this.points[i - 1].y) * percent + this.points[i - 1].y;
          this.lineTo(vectorX, vectorY);
          break;
        }
      }
    };

    Line.prototype.fadeOut = function() {
      TweenLite.to(this, .3, {
        alpha: 0,
        onComplete: this.dispose
      });
    };

    Line.prototype.dispose = function() {
      if (this.parent) {
        this.parent.removeChild(this);
      }
    };

    return Line;

  })(PIXI.Graphics);

  MoneyAnimation = (function(_super) {
    __extends(MoneyAnimation, _super);

    function MoneyAnimation(amount, x, y) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      MoneyAnimation.__super__.constructor.apply(this, arguments);
      this.position.x = x;
      this.position.y = y;
      if (amount > 0) {
        this.bg = new PIXI.Sprite(PIXI.Texture.fromImage("./img/lineG_up_1fig.png"));
        this.text = new PIXI.BitmapText("+" + amount, {
          font: "14px PMNCaeciliaLT",
          align: "right"
        });
      } else {
        this.text = new PIXI.BitmapText("-" + amount, {
          font: "14px PMNCaeciliaLT",
          align: "right"
        });
        this.bg = new PIXI.Sprite(PIXI.Texture.fromImage("./img/lineG_down_3fig.png"));
      }
      this.text.position.x = 25;
      this.text.position.y = 5;
      this.alpha = 0;
      this.addChild(this.bg);
      this.addChild(this.text);
      this.position.y -= 20;
      if (amount > 0) {
        this.position.x -= 30;
      }
      TweenLite.to(this, .2, {
        alpha: 1
      });
      if (amount > 0) {
        TweenLite.to(this.position, 1, {
          y: y - 70
        });
      } else {
        TweenLite.to(this.position, 1, {
          y: y + 30
        });
      }
      TweenLite.to(this, .2, {
        alpha: 0,
        delay: .8,
        onComplete: this.dispose
      });
      return;
    }

    MoneyAnimation.prototype.dispose = function() {
      if (this.parent) {
        return this.parent.removeChild(this);
      }
    };

    return MoneyAnimation;

  })(PIXI.DisplayObjectContainer);

  NotEnoughtMoneyMsg = (function(_super) {
    __extends(NotEnoughtMoneyMsg, _super);

    function NotEnoughtMoneyMsg() {
      this.dispose = __bind(this.dispose, this);
      NotEnoughtMoneyMsg.__super__.constructor.call(this, PIXI.Texture.fromImage("./img/lineG_drow_lack.png"));
      this.alpha = 0;
      this.anchor.x = .5;
      this.anchor.y = .5;
      this.scale.x = .8;
      this.scale.y = .8;
      TweenLite.to(this.scale, .5, {
        x: 1,
        y: 1,
        ease: Back.easeOut
      });
      TweenLite.to(this, .4, {
        alpha: 1
      });
      TweenLite.to(this, .4, {
        alpha: 0,
        delay: 2
      });
      TweenLite.to(this.scale, .5, {
        x: .8,
        y: .8,
        ease: Back.easeIn,
        delay: 2,
        onComplete: this.dispose
      });
    }

    NotEnoughtMoneyMsg.prototype.dispose = function() {
      if (this.parent) {
        return this.parent.removeChild(this);
      }
    };

    return NotEnoughtMoneyMsg;

  })(PIXI.Sprite);

  Game = (function() {
    Game.instance = new Game();

    Game.stage = null;

    Game.prototype.canConstruct = false;

    Game.prototype.canLine = false;

    Game.prototype.canSquare = false;

    Game.prototype.canTriangle = false;

    Game.prototype.isStart = false;

    Game.prototype.pause = false;

    Game.prototype.map = null;

    Game.prototype.areas = null;

    Game.prototype.mobiles = null;

    Game.prototype.gameEndChecker = null;

    Game.prototype.lineG = 900;

    Game.prototype.lineGBox = null;

    Game.prototype.mobilesToRemove = null;

    function Game() {
      if (Game.instance) {
        throw new Error("You can't create an instance of Game, use Game.instance");
      }
      this.mobiles = [];
      this.mobilesToRemove = [];
      this.areas = [];
      return;
    }

    Game.prototype.update = function(dt) {
      var area, idx, mobile, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      _ref = this.mobilesToRemove;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mobile = _ref[_i];
        idx = this.mobiles.indexOf(mobile);
        this.mobiles.splice(idx, 1);
        Game.stage.removeChild(mobile);
      }
      this.mobilesToRemove = [];
      if (this.pause) {
        return;
      }
      if (this.gameEndChecker) {
        if (this.gameEndChecker.check() && this.isStart) {
          this.pause = true;
          if (this.gameEndChecker.isWin) {
            this.onWin();
          } else {
            this.onLoose();
          }
        }
      }
      if (this.lineGBox) {
        this.lineGBox.update();
      }
      _ref1 = this.areas;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        area = _ref1[_j];
        area.update(dt);
      }
      _ref2 = this.mobiles;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        mobile = _ref2[_k];
        mobile.update(dt);
      }
    };

    Game.prototype.onWin = function() {
      var gainNode, image;
      image = new PIXI.Sprite(PIXI.Texture.fromImage("./img/win_text.png"));
      image.anchor.x = .5;
      image.anchor.y = .5;
      image.scale.x = .8;
      image.scale.y = .8;
      image.position.x = 528;
      image.position.y = 336;
      image.alpha = 0;
      Game.stage.addChild(image);
      if (window.IS_CHROME) {
        gainNode = SoundManager.instance.getGain("loop");
        TweenLite.to(gainNode.gain, .5, {
          value: 0,
          ease: Quad.easeIn
        });
        SoundManager.instance.play("./sounds/victory.mp3");
      }
      TweenLite.to(image.scale, .8, {
        x: 1,
        y: 1,
        ease: Back.easeOut
      });
      TweenLite.to(image, .8, {
        alpha: 1
      });
      $("h1").addClass("win");
      setTimeout(Game.instance.closeGame, 4000);
    };

    Game.prototype.closeGame = function() {
      DisplayController.instance.display(0, 0, 0, 0, 0);
      TweenLite.to($("body"), 1.5, {
        scrollTop: 0,
        delay: .5,
        ease: Quad.easeOut
      });
      TweenLite.to($("#ending"), 1.4, {
        scrollTop: 0,
        delay: 2.1,
        opacity: 1,
        ease: Quad.easeOut,
        onStart: function() {
          return $("#ending").css('display', 'block');
        }
      });
    };

    Game.prototype.onLoose = function() {
      var gainNode;
      $("h1").addClass("loose");
      if (window.IS_CHROME) {
        gainNode = SoundManager.instance.getGain("loop");
        TweenLite.to(gainNode.gain, .5, {
          value: 0,
          ease: Quad.easeIn
        });
        SoundManager.instance.play("./sounds/gameover.mp3");
      }
      TweenLite.to($("#squareWin"), 4, {
        autoAlpha: 1,
        delay: 2,
        onStart: function() {
          return $("#squareWin").css("display", "block");
        }
      });
      DisplayController.instance.display(0, 0, 0, 0, 0);
      TweenLite.to($("body"), 1.5, {
        scrollTop: 0,
        delay: .5,
        ease: Quad.easeOut
      });
    };

    Game.prototype.initWithData = function(data, width, height) {
      var a, b, building, g, mobile, r, x, y, _i, _j, _ref, _ref1;
      this.gameEndChecker = new GameEndChecker();
      this.lineGBox = new LineGBox();
      Game.stage.addChild(new PIXI.Sprite(PIXI.Texture.fromImage("./img/bg.png")));
      this.map = new Map(Math.floor(width / 8), Math.floor(height / 8));
      this.map.initWithData(data);
      for (y = _i = 0, _ref = this.map.gridSize; _ref > 0 ? _i <= height : _i >= height; y = _i += _ref) {
        for (x = _j = 0, _ref1 = this.map.gridSize; _ref1 > 0 ? _j <= width : _j >= width; x = _j += _ref1) {
          r = data[((width * y) + x) * 4];
          g = data[((width * y) + x) * 4 + 1];
          b = data[((width * y) + x) * 4 + 2];
          a = data[((width * y) + x) * 4 + 3];
          building = BuildingFactory.withData(r, g, b, a);
          if (building !== null) {
            building.position = new Point(x, y);
            this.addBuilding(building);
          }
          mobile = MobileFactory.withData(r, g, b, a);
          if (mobile !== null) {
            mobile.position = new Point(x, y);
            this.addMobile(mobile);
          }
        }
      }
      Game.stage.addChild(this.lineGBox);
      InteractiveController.instance.init(Game.stage);
    };

    Game.prototype.findCastles = function(x, y, width, height) {
      var area, castles, i, j, _i, _j, _ref, _ref1;
      castles = [];
      for (i = _i = x, _ref = x + width; _i < _ref; i = _i += 8) {
        for (j = _j = y, _ref1 = y + height; _j < _ref1; j = _j += 8) {
          area = this.areaAtPosition(i, j);
          if (area !== null && area.building !== null && (area.building.name === "castle" || area.building.name === "bigCastle")) {
            if (castles.indexOf(area.building) === -1) {
              castles.push(area.building);
            }
          }
        }
      }
      return castles;
    };

    Game.prototype.addChild = function(child) {
      Game.stage.addChild(child);
    };

    Game.prototype.areaAtPosition = function(x, y) {
      var area, _i, _len, _ref;
      _ref = this.areas;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        area = _ref[_i];
        if (area.hitTest(x, y)) {
          return area;
        }
      }
      return null;
    };

    Game.prototype.addBuilding = function(building) {
      this.areas.push(building);
      building.position = building.position;
      Game.stage.addChild(building);
    };

    Game.prototype.removeBuilding = function(area) {
      var idx;
      idx = areas.indexOf(area);
      areas.splice(idx, 1);
      Game.stage.removeChild(area);
    };

    Game.prototype.addMobile = function(mobile) {
      this.mobiles.push(mobile);
      Game.stage.addChild(mobile);
    };

    Game.prototype.removeMobile = function(mobile) {
      this.mobilesToRemove.push(mobile);
    };

    return Game;

  })();

  IAController = (function() {
    IAController.instance = new IAController();

    IAController.prototype.difficulty = 0;

    IAController.prototype.nextMoveDuration = 0;

    IAController.prototype.lastMove = 0;

    IAController.prototype.nextBuildDuration = 0;

    IAController.prototype.lastBuild = 0;

    IAController.prototype.castles = null;

    function IAController() {
      if (IAController.instance) {
        throw new Error("You can t create an instance of IAController");
      }
      this.castles = [];
      return;
    }

    IAController.prototype.update = function(dt) {
      if (Game.pause) {
        return;
      }
      if (this.castles.length === 0) {
        return;
      }
      this.lastMove -= dt;
      if (this.lastMove <= 0) {
        this.lastMove = this.nextMoveDuration;
        this.newAttack();
      }
      this.lastBuild -= dt;
      if (this.lastBuild <= 0) {
        this.lastBuild = this.nextBuildDuration;
        this.newBuild();
      }
    };

    IAController.prototype.newBuild = function() {
      var area, building;
      area = this.selectEmptyArea();
      if (area === null) {
        return;
      }
      if (this.difficulty === Difficulty.EASY) {
        if (Math.random() > .8) {
          building = new Castle(Country.Square);
        } else {
          building = new Mine(Country.Square);
        }
      } else {
        building = new Castle(Country.Square);
      }
      area.build(building);
    };

    IAController.prototype.newAttack = function() {
      var castle, p1, p2, points, target, x, y;
      castle = this.selectRandomCastle();
      target = this.selectRandomEnnemyArea();
      if (target === null || castle === null) {
        return;
      }
      x = Math.floor(castle.area.position.x / 8);
      y = Math.floor(castle.area.position.y / 8);
      p1 = {
        x: x,
        y: y
      };
      x = Math.floor(target.position.x / 8);
      y = Math.floor(target.position.y / 8);
      p2 = {
        x: x,
        y: y
      };
      points = Game.instance.map.astar(p1, p2);
      castle.setLine(points, false);
    };

    IAController.prototype.addCastle = function(castle) {
      if (this.castles.indexOf(castle) === -1) {
        this.castles.push(castle);
      }
    };

    IAController.prototype.removeCastle = function(castle) {
      var idx;
      idx = this.castles.indexOf(castle);
      if (idx !== -1) {
        this.castles.splice(idx, 1);
      }
    };

    IAController.prototype.selectRandomCastle = function() {
      if (this.castles.length === 0) {
        return null;
      }
      return this.castles[Math.floor(Math.random() * this.castles.length)];
    };

    IAController.prototype.selectEmptyArea = function() {
      var area, areas, _i, _len, _ref;
      areas = [];
      _ref = Game.instance.areas;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        area = _ref[_i];
        if (area.building === null) {
          areas.push(area);
        }
      }
      if (areas.length === 0) {
        return null;
      }
      return areas[Math.floor(Math.random() * areas.length)];
    };

    IAController.prototype.selectRandomEnnemyArea = function() {
      var area, areas, _i, _len, _ref;
      areas = [];
      _ref = Game.instance.areas;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        area = _ref[_i];
        if (area.building !== null && area.building.owner === Country.Dots) {
          areas.push(area);
        }
      }
      if (areas.length === 0) {
        return null;
      }
      return areas[Math.floor(Math.random() * areas.length)];
    };

    IAController.prototype.setup = function(difficulty) {
      this.difficulty = difficulty;
      switch (difficulty) {
        case Difficulty.EASY:
          this.nextMoveDuration = 6000;
          this.nextBuildDuration = 20000;
          break;
        case Difficulty.MEDIUM:
          this.nextMoveDuration = 5000;
          this.nextBuildDuration = 15000;
          break;
        case Difficulty.ADVANCED:
          this.nextMoveDuration = 3000;
          this.nextBuildDuration = 10000;
          break;
        case Difficulty.EXPERT:
          this.nextMoveDuration = 1000;
          this.nextBuildDuration = 5000;
          break;
      }
      this.lastMove = this.nextMoveDuration;
      this.lastBuild = this.nextBuildDuration;
    };

    return IAController;

  })();

  Difficulty = (function() {
    function Difficulty() {}

    Difficulty.EASY = 0x000001;

    Difficulty.MEDIUM = 0x000002;

    Difficulty.ADVANCED = 0x000004;

    Difficulty.EXPERT = 0x000008;

    return Difficulty;

  })();

  LineCreation = (function() {
    LineCreation.prototype.stage = null;

    LineCreation.prototype.graphic = null;

    LineCreation.prototype.points = null;

    LineCreation.prototype.area = null;

    LineCreation.prototype.costBox = null;

    function LineCreation(area, stage, x, y) {
      this.area = area;
      this.stage = stage;
      this.onEnd = __bind(this.onEnd, this);
      this.onError = __bind(this.onError, this);
      this.onMove = __bind(this.onMove, this);
      stage.mousemove = this.onMove;
      stage.touchmove = this.onMove;
      stage.mouseup = this.onEnd;
      stage.toucstop = this.onEnd;
      this.graphic = new PIXI.Graphics();
      this.stage.addChild(this.graphic);
      this.points = [];
      this.points.push({
        x: x,
        y: y
      });
      this.costBox = new LineCost();
      this.costBox.position.x = x + 10;
      this.costBox.position.y = y - 5;
      this.stage.addChild(this.costBox);
      return;
    }

    LineCreation.prototype.onMove = function(data) {
      var cost, pos;
      pos = data.global;
      if (!Game.instance.map.isWalkable(Math.floor(pos.x / 8), Math.floor(pos.y / 8))) {
        this.onError(data);
      }
      this.points.push({
        x: pos.x,
        y: pos.y
      });
      this.points = simplify(this.points, 1, false);
      this.graphic.clear();
      this.graphic.lineStyle(2, 0x000000, 1);
      this.graphic.moveTo(this.points[0].x, this.points[0].y);
      cost = this.calculateCost();
      this.costBox.setCost(Math.floor(cost));
      this.costBox.position.x = pos.x + 10;
      this.costBox.position.y = pos.y - 5;
    };

    LineCreation.prototype.calculateCost = function() {
      var coeff, cost, lastP, p, _i, _len, _ref;
      cost = 0;
      coeff = .1;
      lastP = null;
      _ref = this.points;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        this.graphic.lineTo(p.x, p.y);
        this.graphic.moveTo(p.x, p.y);
        if (lastP !== null) {
          cost += this.distance(p, lastP) * coeff;
        }
        lastP = p;
      }
      return cost;
    };

    LineCreation.prototype.distance = function(p1, p2) {
      return Math.abs(p1.x - p2.x) + Math.abs(p1.y - p2.y);
    };

    LineCreation.prototype.onError = function() {
      var error;
      error = new ErrorLineMsg();
      error.position.x = this.points[this.points.length - 1].x;
      error.position.y = this.points[this.points.length - 1].y;
      Game.stage.addChild(error);
      this.clean();
    };

    LineCreation.prototype.onEnd = function(data) {
      var cost, msg;
      this.clean();
      cost = this.calculateCost();
      if (cost > Game.instance.lineG) {
        msg = new NotEnoughtMoneyMsg();
        msg.position.x = this.points[this.points.length - 1].x;
        msg.position.y = this.points[this.points.length - 1].y;
        this.stage.addChild(msg);
        return;
      }
      if (this.area.building !== null) {
        this.area.building.setLine(this.points);
        Game.instance.lineG -= cost;
      }
    };

    LineCreation.prototype.clean = function() {
      this.costBox.remove();
      this.graphic.clear();
      TweenLite.to(this.graphic, .3, {
        alpha: 0
      });
      this.stage.mousemove = null;
      this.stage.touchmove = null;
      this.stage.mouseup = null;
      this.stage.toucstop = null;
      InteractiveController.instance.moveDelegate = null;
    };

    return LineCreation;

  })();

  ShapeCreation = (function() {
    ShapeCreation.prototype.stage = null;

    ShapeCreation.prototype.graphic = null;

    ShapeCreation.prototype.drawArea = null;

    ShapeCreation.prototype.helper = null;

    ShapeCreation.prototype.points = null;

    ShapeCreation.prototype.area = null;

    function ShapeCreation(area, stage, x, y) {
      this.area = area;
      this.stage = stage;
      this.onEnd = __bind(this.onEnd, this);
      this.onMove = __bind(this.onMove, this);
      stage.mousemove = this.onMove;
      stage.touchmove = this.onMove;
      stage.mouseup = this.onEnd;
      stage.toucstop = this.onEnd;
      this.drawArea = new PIXI.Sprite(PIXI.Texture.fromImage("./img/area_over_circle.png"));
      this.drawArea.anchor.x = .5;
      this.drawArea.anchor.y = .5;
      this.drawArea.position.x = area.position.x;
      this.drawArea.position.y = area.position.y - 20;
      this.drawArea.scale.x = .8;
      this.drawArea.scale.y = .8;
      this.drawArea.alpha = 0;
      TweenLite.to(this.drawArea.scale, .3, {
        x: 1,
        y: 1
      });
      TweenLite.to(this.drawArea, .3, {
        alpha: 1
      });
      if (Game.instance.canTriangle && !Game.instance.canSquare) {
        this.helper = new PIXI.Sprite(PIXI.Texture.fromImage("./img/area_over_pyramid.png"));
      } else if (!Game.instance.canTriangle && Game.instance.canSquare) {
        this.helper = new PIXI.Sprite(PIXI.Texture.fromImage("./img/area_over_box.png"));
      } else {
        this.helper = new PIXI.Sprite(PIXI.Texture.fromImage("./img/area_over_shapes.png"));
      }
      this.helper.anchor.x = .5;
      this.helper.anchor.y = .5;
      this.helper.position.x = area.position.x;
      this.helper.position.y = area.position.y - 20;
      this.helper.scale.x = .8;
      this.helper.scale.y = .8;
      this.helper.alpha = 0;
      TweenLite.to(this.helper.scale, .3, {
        x: 1,
        y: 1
      });
      TweenLite.to(this.helper, .3, {
        alpha: 1
      });
      Game.stage.addChild(this.helper);
      Game.stage.addChild(this.drawArea);
      this.graphic = new PIXI.Graphics();
      this.graphic.position.x = 0;
      this.graphic.position.y = 0;
      this.stage.addChild(this.graphic);
      this.points = [];
      this.points.push({
        x: x,
        y: y
      });
      return;
    }

    ShapeCreation.prototype.onMove = function(data) {
      var p, pos, _i, _len, _ref;
      pos = data.global;
      this.points.push({
        x: pos.x,
        y: pos.y
      });
      this.points = simplify(this.points, 1, false);
      this.graphic.clear();
      this.graphic.lineStyle(2, 0x000000, 1);
      this.graphic.moveTo(this.points[0].x, this.points[0].y);
      _ref = this.points;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        this.graphic.lineTo(p.x, p.y);
        this.graphic.moveTo(p.x, p.y);
      }
    };

    ShapeCreation.prototype.onEnd = function(data) {
      var msg, p, _i, _len, _ref;
      this.graphic.clear();
      this.graphic.lineStyle(2, 0x000000, .8);
      this.corners = findCorner(this.points);
      this.graphic.moveTo(this.points[0].x, this.points[0].y);
      _ref = this.points;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        this.graphic.lineTo(p.x, p.y);
        this.graphic.moveTo(p.x, p.y);
      }
      if (Game.instance.lineG < 100) {
        msg = new NotEnoughtMoneyMsg();
        msg.position.x = this.area.position.x;
        msg.position.y = this.area.position.y;
        Game.stage.addChild(msg);
      } else if (this.area.building !== null) {
        this.clean();
        return;
      } else if (Game.instance.canTriangle && isTriangle(this.corners)) {
        Game.instance.lineG -= 100;
        Game.instance.lineGBox.spend(100);
        this.area.build(new Castle(Country.Dots));
      } else if (Game.instance.canSquare && isSquare(this.corners)) {
        Game.instance.lineG -= 100;
        Game.instance.lineGBox.spend(100);
        this.area.build(new Mine(Country.Dots));
      }
      this.clean();
    };

    ShapeCreation.prototype.clean = function() {
      TweenLite.to(this.drawArea.scale, .3, {
        x: .8,
        y: .8
      });
      TweenLite.to(this.drawArea, .3, {
        alpha: 0
      });
      TweenLite.to(this.helper.scale, .3, {
        x: .8,
        y: .8
      });
      TweenLite.to(this.helper, .3, {
        alpha: 0
      });
      TweenLite.to(this.graphic, .3, {
        alpha: 0
      });
      this.stage.mousemove = null;
      this.stage.touchmove = null;
      this.stage.mouseup = null;
      this.stage.toucstop = null;
      return InteractiveController.instance.moveDelegate = null;
    };

    return ShapeCreation;

  })();

  VisualLine = (function() {
    function VisualLine() {
      return;
    }

    return VisualLine;

  })();

  InteractiveController = (function() {
    InteractiveController.instance = new InteractiveController();

    InteractiveController.prototype.stage = null;

    InteractiveController.prototype.moveDelegate = null;

    function InteractiveController() {
      if (InteractiveController.instance) {
        throw new Error("You can't create an instance of InteractiveController, use static property");
      }
      return;
    }

    InteractiveController.prototype.init = function(stage) {
      this.stage = stage;
      stage.mousedown = this.onTouch;
      stage.touch = this.onTouch;
    };

    InteractiveController.prototype.onTouch = function(data) {
      var area;
      if (Game.instance.pause) {
        return;
      }
      area = Game.instance.areaAtPosition(data.global.x, data.global.y);
      if (area !== null) {
        if (area.building === null) {
          if (Game.instance.canConstruct) {
            this.moveDelegate = new ShapeCreation(area, Game.stage, data.global.x, data.global.y);
          }
        } else if (Game.instance.canLine && area.building.owner === Country.Dots && area.building.name === "castle") {
          this.moveDelegate = new LineCreation(area, Game.stage, data.global.x, data.global.y);
        }
      }
    };

    return InteractiveController;

  })();

  AMobile = (function(_super) {
    __extends(AMobile, _super);

    AMobile.prototype.position = null;

    AMobile.prototype.owner = null;

    AMobile.prototype.line = null;

    AMobile.prototype.state = 0;

    AMobile.prototype.destination = null;

    AMobile.prototype.speed = 0.07;

    AMobile.prototype.shadow = null;

    AMobile.prototype.damage = 1;

    function AMobile(texture, owner) {
      this.onDie = __bind(this.onDie, this);
      this.onAttackComplete = __bind(this.onAttackComplete, this);
      AMobile.__super__.constructor.call(this, texture);
      this.shadow = new Shadow(this);
      Game.stage.addChild(this.shadow);
      this.owner = owner;
      this.line = [];
      this.state = MobileState.Waiting;
      return;
    }

    AMobile.prototype.update = function(dt) {
      var area, ennemy;
      if (this.isDie() || this.isAttacking()) {
        return;
      }
      if (this.destination !== null) {
        this.move(dt);
        if (this.shadow) {
          this.shadow.update();
        }
        ennemy = this.ennemyInZone();
        if (ennemy) {
          this.attackEnnemy(ennemy);
          return;
        }
        area = Game.instance.areaAtPosition(this.position.x, this.position.y);
        if (area !== null && area.building !== null && area.building.owner !== this.owner) {
          this.attackArea(area);
          return;
        }
      } else if (this.line.length > 0) {
        this.destination = this.line.splice(0, 1)[0];
        this.update(dt);
      } else if (this.state === MobileState.Moving) {
        this.onDie();
      }
    };

    AMobile.prototype.isWaiting = function() {
      return this.state & MobileState.Waiting;
    };

    AMobile.prototype.isAttacking = function() {
      return this.state & MobileState.Attacking;
    };

    AMobile.prototype.isDie = function() {
      return this.state & MobileState.Die;
    };

    AMobile.prototype.attackArea = function(area) {
      this.line = [];
      this.state = MobileState.Attacking;
      if (this.shadow) {
        this.shadow.destroy();
        this.shadow = null;
      }
      TweenLite.to(this.position, .15, {
        x: area.position.x,
        y: area.position.y - area.building.height
      });
      TweenLite.to(this.position, .15, {
        delay: .15,
        x: area.position.x,
        y: area.position.y,
        onComplete: this.onAttackComplete
      });
    };

    AMobile.prototype.ennemyInZone = function() {
      var mobile, _i, _len, _ref;
      _ref = Game.instance.mobiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mobile = _ref[_i];
        if (mobile.owner !== this.owner && HitTest.testCircle(this.position, mobile, 10)) {
          return mobile;
        }
      }
      return null;
    };

    AMobile.prototype.attackEnnemy = function(ennemy) {
      var battle;
      this.onDie();
      ennemy.onDie();
      battle = BattlePool.getInstance().checkOut();
      battle.position.x = this.position.x;
      battle.visible = true;
      battle.position.y = this.position.y;
      battle.gotoAndPlay(0);
      battle.play();
      Game.stage.addChild(battle);
    };

    AMobile.prototype.moveTo = function(x, y) {
      this.state = MobileState.Moving;
      this.destination = {
        x: x,
        y: y
      };
    };

    AMobile.prototype.move = function(dt) {
      var caseX, caseY, distance, moveX, moveY, speedDT;
      speedDT = this.speed * dt;
      caseX = Math.floor(this.position.x / 8);
      caseY = Math.floor(this.position.y / 8);
      if (Game.instance.map.isMarsh(caseX, caseY)) {
        speedDT *= .3;
      }
      while (speedDT > 0) {
        moveX = Math.max(Math.min(this.destination.x - this.position.x, speedDT), -speedDT);
        moveY = Math.max(Math.min(this.destination.y - this.position.y, speedDT), -speedDT);
        this.position.x += moveX;
        this.position.y += moveY;
        if (Game.instance.map.isWater(Math.floor(this.position.x / 8), Math.floor(this.position.y / 8))) {
          if (Math.random() > .95) {
            this.onDie();
          }
        }
        distance = Math.abs(moveX) + Math.abs(moveY);
        speedDT -= distance;
        if (this.position.x === this.destination.x && this.position.y === this.destination.y) {
          if (this.line.length > 0 && speedDT > 0) {
            this.destination = this.line.splice(0, 1)[0];
          } else {
            this.destination = null;
            break;
          }
        }
      }
    };

    AMobile.prototype.followLine = function(line) {
      this.state = MobileState.Moving;
      this.line = line.clone();
      this.isWaiting = false;
    };

    AMobile.prototype.stop = function() {
      this.destination = null;
    };

    AMobile.prototype.onAttackComplete = function() {
      var area;
      area = Game.instance.areaAtPosition(this.position.x, this.position.y);
      if (area.building === null) {
        this.onDie();
        return;
      } else {
        area.building.damage(this.damage);
      }
      if (area.building === null) {
        this.castle.removeLine();
      }
      return this.onDie();
    };

    AMobile.prototype.onDie = function() {
      if (this.state & MobileState.Die) {
        return;
      }
      if (this.shadow !== null) {
        this.shadow.destroy();
        this.shadow = null;
      }
      this.state += MobileState.Die;
      this.castle.removeUnit(this);
      Game.instance.removeMobile(this);
    };

    return AMobile;

  })(PIXI.Sprite);

  MobileState = (function() {
    function MobileState() {}

    MobileState.Waiting = 0x000001;

    MobileState.Moving = 0x000002;

    MobileState.Attacking = 0x000004;

    MobileState.Sleeping = 0x000008;

    MobileState.Die = 0x000010;

    return MobileState;

  })();

  DwarfSoldier = (function(_super) {
    __extends(DwarfSoldier, _super);

    DwarfSoldier.prototype.castle = null;

    function DwarfSoldier(owner, castle) {
      var texture;
      this.castle = castle;
      texture = new PIXI.Texture.fromImage("./img/soldier_triangle_S.png");
      DwarfSoldier.__super__.constructor.call(this, texture, owner);
    }

    return DwarfSoldier;

  })(AMobile);

  King = (function(_super) {
    __extends(King, _super);

    function King() {
      King.__super__.constructor.call(this, new PIXI.Texture.fromImage("./img/soldier_dot_S.png", null));
      return;
    }

    return King;

  })(AMobile);

  MobileFactory = (function() {
    function MobileFactory() {
      return;
    }

    MobileFactory.withData = function(r, g, b, a) {
      return null;
    };

    return MobileFactory;

  })();

  Shadow = (function(_super) {
    __extends(Shadow, _super);

    Shadow.prototype.mobile = null;

    function Shadow(mobile) {
      this.mobile = mobile;
      Shadow.__super__.constructor.call(this, PIXI.Texture.fromImage("./img/soldier_dot_S_shadow.png"));
      this.anchor.x = 0.1;
      this.anchor.y = -1.5;
      return;
    }

    Shadow.prototype.update = function() {
      this.position.x = this.mobile.position.x;
      this.position.y = this.mobile.position.y;
    };

    Shadow.prototype.destroy = function() {
      TweenLite.to(this.scale, .1, {
        x: 0,
        y: 0,
        onComplete: this.dispose
      });
    };

    Shadow.prototype.dispose = function() {
      this.mobile = null;
      if (this.parent) {
        this.parent.removeChild(this);
      }
    };

    return Shadow;

  })(PIXI.Sprite);

  Soldier = (function(_super) {
    __extends(Soldier, _super);

    Soldier.prototype.castle = null;

    function Soldier(owner, castle) {
      var texture;
      this.castle = castle;
      if (owner === Country.Dots) {
        texture = new PIXI.Texture.fromImage("./img/soldier_dot_S.png");
      } else if (owner === Country.Square) {
        texture = new PIXI.Texture.fromImage("./img/soldier_square_S.png");
      } else {
        texture = new PIXI.Texture.fromImage("./img/soldier_triangle_S.png");
      }
      Soldier.__super__.constructor.call(this, texture, owner);
    }

    return Soldier;

  })(AMobile);

  SoundManager = (function() {
    SoundManager.instance = new SoundManager();

    SoundManager.prototype.buffers = null;

    SoundManager.prototype.sources = null;

    SoundManager.prototype.gains = null;

    SoundManager.prototype.context = null;

    SoundManager.advancedBrowser = false;

    function SoundManager() {
      if (SoundManager.instance) {
        throw new Error("You can't create an instance of SoundManager");
      }
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      if (window.AudioContext) {
        this.advancedBrowser = true;
      }
      if (this.advancedBrowser) {
        this.context = new AudioContext();
      }
      this.buffers = {};
      this.sources = {};
      this.gains = {};
      return;
    }

    SoundManager.prototype.add = function(buffer, id) {
      if (!this.advancedBrowser) {
        return;
      }
      this.buffers[id] = buffer;
    };

    SoundManager.prototype.play = function(id, looped, newID) {
      var source;
      if (looped == null) {
        looped = false;
      }
      if (!this.advancedBrowser) {
        return;
      }
      if (newID == null) {
        newID = id;
      }
      source = this.context.createBufferSource();
      source.buffer = this.buffers[id];
      source.connect(this.context.destination);
      source.start(0);
      source.loop = looped;
      this.sources[newID] = source;
      return source;
    };

    SoundManager.prototype.playWithVolume = function(id, volume) {
      var gainNode, source;
      source = this.context.createBufferSource();
      source.buffer = this.buffers[id];
      gainNode = this.context.createGain();
      gainNode.connect(this.context.destination);
      gainNode.gain.value = volume;
      source.connect(gainNode);
      source.start(0);
      return source;
    };

    SoundManager.prototype.getSource = function(id) {
      if (!this.advancedBrowser) {
        return;
      }
      return this.sources[id];
    };

    SoundManager.prototype.addGain = function(gain, id) {
      this.gains[id] = gain;
    };

    SoundManager.prototype.getGain = function(id) {
      if (!this.advancedBrowser) {
        return;
      }
      return this.gains[id];
    };

    return SoundManager;

  })();

  StoryManager = (function() {
    StoryManager.instance = new StoryManager();

    StoryManager.prototype.currentStep = 0;

    StoryManager.prototype.steps = null;

    StoryManager.prototype.conditionChecker = null;

    StoryManager.prototype.text = null;

    StoryManager.prototype.oldID = "";

    function StoryManager() {
      if (StoryManager.instance) {
        throw new Error("you can t create an instance of StoryManager");
      }
      return;
    }

    StoryManager.prototype.init = function() {
      this.steps = [this.introStoryStep, this.buildCastleStep, this.buildCastleSucessStep, this.ennemyVillageStep, this.moveYourUnitStep, this.winFirstBattleStep, this.buildMineSucessStep, this.firstBattleStep, this.startBattleStep, this.castleDestroyStep, this.flyingCastleStep];
    };

    StoryManager.prototype.displayText = function(id, delay) {
      var i,
        _this = this;
      if (this.text !== null) {
        i = this.oldID;
        TweenLite.to(this.text, .3, {
          delay: delay,
          opacity: 0,
          onComplete: function() {
            return $(i).get(0).style.display = "none";
          }
        });
        delay += .35;
      } else {
        $(id).show();
      }
      this.text = $(id);
      this.oldID = id;
      TweenLite.to($(id), .6, {
        delay: delay + .3,
        autoAlpha: 1,
        onStart: function() {
          return $(id).show();
        }
      });
    };

    StoryManager.prototype.update = function() {
      if (this.conditionChecker !== null) {
        this.conditionChecker.check();
      }
    };

    StoryManager.prototype.start = function() {
      this.nextStep();
    };

    StoryManager.prototype.nextStep = function() {
      StoryManager.instance.conditionChecker = null;
      StoryManager.instance.playStep();
      StoryManager.instance.currentStep++;
    };

    StoryManager.prototype.playStep = function() {
      this.steps[this.currentStep]();
    };

    StoryManager.prototype.introStoryStep = function() {
      var king;
      DisplayController.instance.display(-275, -143, 192, 192, 0, true);
      StoryManager.instance.displayText("#story_01", 0);
      king = new King();
      king.position.x = 240;
      king.position.y = 300;
      Game.instance.addChild(king);
      TweenLite.to(king.position, 1.5, {
        x: 350,
        ease: Linear.easeNone,
        delay: 2
      });
      TweenLite.to(king.position, 1.5, {
        x: 240,
        ease: Linear.easeNone,
        delay: 4.1,
        onComplete: function() {
          Game.stage.removeChild(king);
          return StoryManager.instance.nextStep();
        }
      });
    };

    StoryManager.prototype.buildCastleStep = function() {
      StoryManager.instance.displayText("#story_02", 0);
      Game.instance.canConstruct = true;
      Game.instance.canTriangle = true;
      StoryManager.instance.conditionChecker = new CastleConditionChecker();
    };

    StoryManager.prototype.buildCastleSucessStep = function() {
      Game.instance.canConstruct = false;
      Game.instance.canTriangle = false;
      StoryManager.instance.displayText("#story_03", 0);
      setTimeout(StoryManager.instance.nextStep, 2000);
    };

    StoryManager.prototype.ennemyVillageStep = function() {
      DisplayController.instance.display(-275, -143, 384, 192, 0, false);
      StoryManager.instance.displayText("#story_04", 2);
      setTimeout(StoryManager.instance.nextStep, 5000);
      Game.instance.lineGBox.position.x = 580;
      Game.instance.lineGBox.position.y = 140;
    };

    StoryManager.prototype.moveYourUnitStep = function() {
      Game.instance.canLine = true;
      StoryManager.instance.conditionChecker = new VillageConditionChecker();
      StoryManager.instance.displayText("#story_05", 0);
    };

    StoryManager.prototype.winFirstBattleStep = function() {
      StoryManager.instance.displayText("#story_06", 0);
      StoryManager.instance.displayText("#story_07", 3);
      StoryManager.instance.conditionChecker = new MineConditionChecker();
      Game.instance.canSquare = true;
      Game.instance.canLine = false;
      Game.instance.canConstruct = true;
    };

    StoryManager.prototype.buildMineSucessStep = function() {
      StoryManager.instance.displayText("#story_08", 0);
      Game.instance.canTriangle = true;
      Game.instance.canSquare = true;
      Game.instance.canConstruct = true;
      Game.instance.canLine = true;
      setTimeout(StoryManager.instance.nextStep, 5000);
    };

    StoryManager.prototype.firstBattleStep = function() {
      StoryManager.instance.displayText("#story_09", 1);
      DisplayController.instance.display(-275, -143, 384, 672, 0, false);
      setTimeout(StoryManager.instance.nextStep, 2000);
    };

    StoryManager.prototype.startBattleStep = function() {
      var castle, castles, _i, _len;
      TweenLite.to($("#story_09"), 1, {
        delay: 4,
        opacity: 0,
        onComplete: function() {
          return $("#story_09").get(0).style.display = "none";
        }
      });
      Game.instance.isStart = true;
      IAController.instance.setup(Difficulty.EASY);
      castles = Game.instance.findCastles(275, 143, 384, 672);
      for (_i = 0, _len = castles.length; _i < _len; _i++) {
        castle = castles[_i];
        if (castle.owner === Country.Square) {
          IAController.instance.addCastle(castle);
        }
      }
      StoryManager.instance.conditionChecker = new BigCastleConditionChecker();
    };

    StoryManager.prototype.castleDestroyStep = function() {
      var castle, castles, _i, _len;
      Game.instance.canTriangle = true;
      Game.instance.canSquare = true;
      Game.instance.canConstruct = true;
      Game.instance.canLine = true;
      Game.instance.lineGBox.position.x = 990;
      Game.instance.lineGBox.position.y = 0;
      castles = Game.instance.findCastles(0, 0, 1056, 672);
      for (_i = 0, _len = castles.length; _i < _len; _i++) {
        castle = castles[_i];
        if (castle.owner === Country.Square) {
          IAController.instance.addCastle(castle);
        }
      }
      DisplayController.instance.display(0, 0, 1056, 672, 0, false);
      setTimeout(StoryManager.instance.nextStep, 0);
    };

    StoryManager.prototype.flyingCastleStep = function() {};

    return StoryManager;

  })();

  BigCastleConditionChecker = (function() {
    function BigCastleConditionChecker() {
      return;
    }

    BigCastleConditionChecker.prototype.check = function() {
      var area, _i, _len, _ref;
      _ref = Game.instance.areas;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        area = _ref[_i];
        if (area.building !== null && area.building.name === "bigCastle" && area.building.life < 50) {
          StoryManager.instance.nextStep();
        }
      }
    };

    return BigCastleConditionChecker;

  })();

  CastleConditionChecker = (function() {
    function CastleConditionChecker() {
      return;
    }

    CastleConditionChecker.prototype.check = function() {
      var area, _i, _len, _ref;
      _ref = Game.instance.areas;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        area = _ref[_i];
        if (area.building !== null && area.building.owner === Country.Dots) {
          StoryManager.instance.nextStep();
        }
      }
    };

    return CastleConditionChecker;

  })();

  GameEndChecker = (function() {
    GameEndChecker.prototype.isWin = false;

    GameEndChecker.prototype.isLoose = false;

    function GameEndChecker() {
      return;
    }

    GameEndChecker.prototype.check = function() {
      if (this.checkPlayerWin()) {
        this.isWin = true;
        return true;
      }
      if (this.checkPlayerLoose()) {
        this.isLoose = true;
        return true;
      }
      return false;
    };

    GameEndChecker.prototype.checkPlayerLoose = function() {
      var area, _i, _len, _ref;
      _ref = Game.instance.areas;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        area = _ref[_i];
        if (area.building !== null && area.building.owner === Country.Dots) {
          return false;
        }
      }
      return true;
    };

    GameEndChecker.prototype.checkPlayerWin = function() {
      var area, _i, _len, _ref;
      _ref = Game.instance.areas;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        area = _ref[_i];
        if (area.building !== null && area.building.name === "bigCastle") {
          return false;
        }
      }
      return true;
    };

    return GameEndChecker;

  })();

  MineConditionChecker = (function() {
    function MineConditionChecker() {
      return;
    }

    MineConditionChecker.prototype.check = function() {
      var area, _i, _len, _ref;
      _ref = Game.instance.areas;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        area = _ref[_i];
        if (area.building !== null && area.building.owner === Country.Dots && area.building.name === "mine") {
          StoryManager.instance.nextStep();
        }
      }
    };

    return MineConditionChecker;

  })();

  VillageConditionChecker = (function() {
    function VillageConditionChecker() {
      return;
    }

    VillageConditionChecker.prototype.check = function() {
      var area, _i, _len, _ref;
      _ref = Game.instance.areas;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        area = _ref[_i];
        if (area.building !== null && area.building.name === "village") {
          return;
        }
      }
      StoryManager.instance.nextStep();
    };

    return VillageConditionChecker;

  })();

  DisplayController = (function() {
    DisplayController.instance = new DisplayController();

    DisplayController.prototype.domElement = null;

    DisplayController.prototype.canvasElement = null;

    function DisplayController() {
      if (DisplayController.instance) {
        throw new Error("You can t create an instance of DisplayController");
      }
      return;
    }

    DisplayController.prototype.init = function(domElement, canvasElement) {
      this.domElement = domElement;
      this.canvasElement = canvasElement;
    };

    DisplayController.prototype.display = function(x, y, width, height, delay, scroll) {
      var top;
      if (scroll == null) {
        scroll = true;
      }
      if (scroll) {
        top = (window.innerHeight - height) / 2 + $(this.domElement).offset().top;
        TweenLite.to($("body"), 1.5, {
          scrollTop: top,
          ease: Quad.easeOut,
          delay: delay
        });
      }
      TweenLite.to(this.domElement, .8, {
        width: width + "px",
        height: height + "px",
        delay: delay,
        ease: Quad.easeOut
      });
      TweenLite.to(this.canvasElement, .8, {
        left: x + "px",
        top: y + "px",
        delay: delay,
        ease: Quad.easeOut
      });
    };

    return DisplayController;

  })();

  LineCost = (function(_super) {
    __extends(LineCost, _super);

    LineCost.prototype.text = null;

    LineCost.prototype.bg = null;

    LineCost.prototype.icon = null;

    function LineCost() {
      LineCost.__super__.constructor.apply(this, arguments);
      this.bg = new PIXI.Graphics();
      this.bg.beginFill(0x9966ff, 0.8);
      this.bg.drawRect(0, 0, 40, 20);
      this.bg.endFill();
      this.text = new PIXI.BitmapText("0", {
        font: "14px PMNCaeciliaLT",
        align: "left"
      });
      this.text.position.x = 10;
      this.text.position.y = 0;
      this.icon = new PIXI.Sprite(PIXI.Texture.fromImage("./img/lineG_icon.png"));
      this.icon.position.x = 0;
      this.icon.position.y = 0;
      this.addChild(this.bg);
      this.addChild(this.text);
      return;
    }

    LineCost.prototype.remove = function() {
      TweenLite.to(this, .2, {
        alpha: 0
      });
      TweenLite.to(this.scale, .2, {
        x: .8,
        y: .8,
        onComplete: this.dispose
      });
    };

    LineCost.prototype.setCost = function(cost) {
      this.text.setText(String(cost));
    };

    LineCost.prototype.dispose = function() {
      if (this.parent) {
        this.parent.removeChild(this);
      }
    };

    return LineCost;

  })(PIXI.DisplayObjectContainer);

  LineGBox = (function(_super) {
    __extends(LineGBox, _super);

    LineGBox.prototype.sprite = null;

    LineGBox.prototype.bg = null;

    LineGBox.prototype.text = null;

    LineGBox.prototype.icon = null;

    function LineGBox() {
      LineGBox.__super__.constructor.apply(this, arguments);
      this.bg = new PIXI.Graphics();
      this.bg.beginFill(0, 0.8);
      this.bg.drawRect(0, 0, 80, 28);
      this.bg.endFill();
      this.icon = new PIXI.Sprite(PIXI.Texture.fromImage("./img/lineG_icon_s.png"));
      this.icon.anchor.x = .5;
      this.icon.anchor.y = .5;
      this.icon.position.x = 17;
      this.icon.position.y = 14;
      this.text = new PIXI.BitmapText("0000", {
        font: "14px PMNCaeciliaLT",
        align: "right"
      });
      this.text.position.x = 35;
      this.text.position.y = 8;
      this.addChild(this.bg);
      this.addChild(this.icon);
      this.addChild(this.text);
      return;
    }

    LineGBox.prototype.update = function() {
      this.text.setText(NumberUtils.addZero(Math.floor(Game.instance.lineG), 4));
    };

    LineGBox.prototype.spend = function(amount) {
      var msg;
      msg = new MoneyAnimation();
      this.addChild(msg);
    };

    return LineGBox;

  })(PIXI.DisplayObjectContainer);

  Main = (function() {
    Main.prototype.stage = null;

    Main.prototype.renderer = null;

    Main.prototype.dt = 0;

    Main.prototype.lastTime = 0;

    function Main() {
      this.animate = __bind(this.animate, this);
      this.stage = new PIXI.Stage(0x000000, true);
      this.renderer = PIXI.autoDetectRenderer(1152, 672, null);
      this.renderer.view.style.display = "block";
      this.renderer.view.className = "gameRenderer";
      this.renderer.view.style.cursor = "../img/pen.png";
      $("#container").append(this.renderer.view);
      DisplayController.instance.init($("#container"), this.renderer.view);
      SceneTraveler.getInstance().travelTo(new StartScene(this.stage));
      this.lastTime = Date.now();
      requestAnimFrame(this.animate);
      return;
    }

    Main.prototype.animate = function() {
      var dt, t;
      requestAnimFrame(this.animate);
      this.renderer.render(this.stage);
      t = Date.now();
      dt = t - this.lastTime;
      this.lastTime = t;
      StoryManager.instance.update();
      Game.instance.update(dt);
      IAController.instance.update(dt);
    };

    return Main;

  })();

  main = null;

  $(document).ready(function() {
    window.IS_CHROME = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
    window.IS_FIREFOX = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
    main = new Main();
  });

  Map = (function() {
    Map.prototype.width = 0;

    Map.prototype.height = 0;

    Map.prototype.gridSize = 8;

    Map.prototype.tiles = null;

    Map.prototype.graph = null;

    function Map(width, height) {
      var x, y, _i, _j;
      this.width = width;
      this.height = height;
      console.log("Map size : " + this.width + "," + this.height);
      this.tiles = new Array(this.width);
      for (x = _i = 0; _i < width; x = _i += 1) {
        for (y = _j = 0; _j < height; y = _j += 1) {
          this.tiles[x] = new Array(this.height);
          this.tiles[x][y] = TileFlag.Walkable;
        }
      }
      return;
    }

    Map.prototype.initWithData = function(data) {
      var a, b, g, height, r, width, x, y, _i, _j, _ref, _ref1;
      height = this.height * this.gridSize;
      width = this.width * this.gridSize;
      for (y = _i = 0, _ref = this.gridSize; _ref > 0 ? _i < height : _i > height; y = _i += _ref) {
        for (x = _j = 0, _ref1 = this.gridSize; _ref1 > 0 ? _j < width : _j > width; x = _j += _ref1) {
          r = data[((width * y) + x) * 4];
          g = data[((width * y) + x) * 4 + 1];
          b = data[((width * y) + x) * 4 + 2];
          a = data[((width * y) + x) * 4 + 3];
          this.tiles[x / this.gridSize][y / this.gridSize] = TileFlag.convertDataToFlag(r, g, b, a);
        }
      }
      this.graph = this.createGraph();
    };

    Map.prototype.astar = function(start, end) {
      var i, line, points, _i, _ref;
      start = this.graph.nodes[start.y][start.x];
      end = this.graph.nodes[end.y][end.x];
      line = astar.search(this.graph.nodes, start, end, true);
      points = [];
      for (i = _i = 0, _ref = line.length; _i < _ref; i = _i += 1) {
        points[i] = {
          x: line[i].y * 8,
          y: line[i].x * 8
        };
      }
      return simplify(points, 1, false);
    };

    Map.prototype.isWalkable = function(x, y) {
      return this.tiles[x][y] & TileFlag.Walkable;
    };

    Map.prototype.isWater = function(x, y) {
      return this.tiles[x][y] & TileFlag.Water;
    };

    Map.prototype.isMarsh = function(x, y) {
      return this.tiles[x][y] & TileFlag.Marsh;
    };

    Map.prototype.toGraphic = function() {
      var graphic, x, y, _i, _j, _ref, _ref1;
      graphic = new PIXI.Graphics();
      for (x = _i = 0, _ref = this.width; _i < _ref; x = _i += 1) {
        for (y = _j = 0, _ref1 = this.height; _j < _ref1; y = _j += 1) {
          if (this.isWater(x, y)) {
            graphic.beginFill(0x0000FF, .5);
          } else if (this.isMarsh(x, y)) {
            graphic.beginFill(0xFF00FF, .5);
          } else if (this.isWalkable(x, y)) {
            graphic.beginFill(0x000000, .5);
          } else {
            graphic.beginFill(0xFF0000, .5);
          }
          graphic.drawRect(x * this.gridSize, y * this.gridSize, this.gridSize, this.gridSize);
          graphic.endFill();
        }
      }
      return graphic;
    };

    Map.prototype.createGraph = function() {
      var array, graph, i, marshWeight, normalWeight, waterWeight, x, y, _i, _j, _k, _ref, _ref1, _ref2;
      marshWeight = 4;
      waterWeight = 5;
      normalWeight = 1;
      array = new Array(this.height);
      for (i = _i = 0, _ref = this.height; _i < _ref; i = _i += 1) {
        array[i] = new Array(this.width);
      }
      for (x = _j = 0, _ref1 = this.width; _j < _ref1; x = _j += 1) {
        for (y = _k = 0, _ref2 = this.height; _k < _ref2; y = _k += 1) {
          if (this.isWater(x, y)) {
            array[y][x] = waterWeight;
          } else if (this.isMarsh(x, y)) {
            array[y][x] = marshWeight;
          } else if (this.isWalkable(x, y)) {
            array[y][x] = normalWeight;
          } else {
            array[y][x] = 0;
          }
        }
      }
      return graph = new Graph(array);
    };

    return Map;

  })();

  TileFlag = (function() {
    function TileFlag() {}

    TileFlag.None = 0x000000;

    TileFlag.Walkable = 0x000001;

    TileFlag.Water = 0x000002;

    TileFlag.Marsh = 0x000004;

    TileFlag.convertDataToFlag = function(r, g, b, a) {
      if (r === 0xFF && g === 0 && b === 0) {
        return TileFlag.None;
      }
      if (r === 0x33 && g === 0x99 && b === 0x66) {
        return TileFlag.Marsh + TileFlag.Walkable;
      }
      if (r === 0x66 && g === 0x99 && b === 0) {
        return TileFlag.Water + TileFlag.Walkable;
      }
      return TileFlag.Walkable;
    };

    return TileFlag;

  }).call(this);

  /*
  Bezier
  Simple class for quadratic bezier ( curve define by 3 points )
  @author David Ronai aka Makio64 // makiopolis.com
  */


  Bezier = (function() {
    var _this = this;

    Bezier.prototype.p0 = null;

    Bezier.prototype.p1 = null;

    Bezier.prototype.p2 = null;

    function Bezier(p0, p1, p2) {
      this.p0 = p0;
      this.p1 = p1;
      this.p2 = p2;
    }

    Bezier.prototype.dispose = function() {
      this.p0.dispose();
      this.p1.dispose();
      this.p2.dispose();
      this.p2 = null;
      this.p1 = null;
      return this.p0 = null;
    };

    Bezier.prototype.getBezierPoint = function(t) {
      var x, y;
      if (t == null) {
        t = 0.0;
      }
      x = Math.pow(1 - t, 2) * this.p0.x + 2 * t * (1 - t) * this.p1.x + Math.pow(t, 2) * this.p2.x;
      y = Math.pow(1 - t, 2) * this.p0.y + 2 * t * (1 - t) * this.p1.y + Math.pow(t, 2) * this.p2.y;
      return new Point(x, y);
    };

    Bezier.prototype.toCubic = function() {
      var new1, new2, points;
      points = [];
      new1 = new Point((this.p1.x + this.p0.x) * .5, (this.p1.y + this.p0.y) * .5);
      new2 = new Point((this.p2.x + this.p1.x) * .5, (this.p2.y + this.p1.y) * .5);
      points[0] = new Point(this.p0.x, this.p0.y);
      points[1] = new1;
      points[2] = new2;
      points[3] = new Point(this.p2.x, this.p2.y);
      return points;
    };

    Bezier.toBezier = function(points, division) {
      var b, c, cubic, finalPoints, i, p1, p2, p3, t, _i, _j, _k, _ref, _ref1, _ref2;
      if (division == null) {
        division = 10;
      }
      cubic = [];
      finalPoints = [];
      for (i = _i = 0, _ref = points.length - 1; _i < _ref; i = _i += 1) {
        p1 = points[i];
        p2 = points[(i + 1) % points.length];
        p3 = points[(i + 2) % points.length];
        b = new Bezier(p1, p2, p3);
        c = b.toCubic();
        cubic.push(p1);
        cubic.push(c[1]);
      }
      for (i = _j = 1, _ref1 = cubic.length - 3; _j < _ref1; i = _j += 2) {
        p1 = cubic[i];
        p2 = cubic[i + 1];
        p3 = cubic[i + 2];
        b = new Bezier(p1, p2, p3);
        for (t = _k = 0.0, _ref2 = 1.0 / division; _ref2 > 0 ? _k < 1.0 : _k > 1.0; t = _k += _ref2) {
          finalPoints.push(b.getBezierPoint(t));
        }
      }
      return finalPoints;
    };

    return Bezier;

  }).call(this);

  /*
  CubicBezier - Bezier
  Simple class for cubic bezier ( curve define by 4 points )
  @author David Ronai aka Makio64 // makiopolis.com
  */


  CubicBezier = (function() {
    CubicBezier.prototype.p0 = null;

    CubicBezier.prototype.p1 = null;

    CubicBezier.prototype.p2 = null;

    CubicBezier.prototype.p3 = null;

    function CubicBezier(p0, p1, p2, p3) {
      this.p3 = p3;
      this.p2 = p2;
      this.p1 = p1;
      this.p0 = p0;
    }

    CubicBezier.prototype.dispose = function() {
      this.p0.dispose();
      this.p1.dispose();
      this.p2.dispose();
      this.p3.dispose();
      this.p3 = null;
      this.p2 = null;
      this.p1 = null;
      return this.p0 = null;
    };

    CubicBezier.prototype.getBezierPoint = function(t) {
      if (t == null) {
        t = 0.0;
      }
      return new Point(Math.pow(1 - t, 3) * this.p0.x + 3 * t * Math.pow(1 - t, 2) * this.p1.x + 3 * t * t * (1 - t) * this.p2.x + t * t * t * this.p3.x, Math.pow(1 - t, 3) * this.p0.y + 3 * t * Math.pow(1 - t, 2) * this.p1.y + 3 * t * t * (1 - t) * this.p2.y + t * t * t * this.p3.y);
    };

    return CubicBezier;

  })();

  Point = (function() {
    var euclidean;

    Point.prototype.x = 0.0;

    Point.prototype.y = 0.0;

    function Point(x, y) {
      this.x = x;
      this.y = y;
      return;
    }

    euclidean = function(p1, p2) {
      var a, b;
      a = (p1 != null ? p1.x : void 0) - (p2 != null ? p2.x : void 0);
      b = (p1 != null ? p1.y : void 0) - (p2 != null ? p2.y : void 0);
      return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
    };

    Point.prototype.add = function(p) {
      this.x += p.x;
      return this.y += p.y;
    };

    Point.prototype.sub = function(p) {
      this.x -= p.x;
      return this.y -= p.y;
    };

    Point.prototype.scale = function(value) {
      this.x *= value;
      return this.y *= value;
    };

    Point.prototype.draw = function(ctx) {
      ctx.fillStyle = '#FFFFFF';
      ctx.fillRect(this.x, this.y, 1, 1);
    };

    Point.prototype.toString = function() {
      return "(" + this.x + ", " + this.y + ")";
    };

    Point.prototype.dispose = function() {};

    return Point;

  })();

  AScene = (function() {
    AScene.prototype.stage = null;

    AScene.prototype.callback = null;

    function AScene(stage) {
      this.stage = stage;
      return;
    }

    AScene.prototype.transitionIn = function(callback) {
      this.callback = callback;
      this.callback();
    };

    AScene.prototype.transitionOut = function(callback) {
      this.callback = callback;
      this.callback();
    };

    AScene.prototype.onEnter = function() {};

    AScene.prototype.onExit = function() {};

    AScene.prototype.update = function(dt) {};

    AScene.prototype.dispose = function() {
      this.stage = null;
      this.callback = null;
    };

    return AScene;

  })();

  GameScene = (function(_super) {
    __extends(GameScene, _super);

    GameScene.prototype.image = null;

    function GameScene(stage) {
      this.onLoad = __bind(this.onLoad, this);
      GameScene.__super__.constructor.call(this, stage);
      return;
    }

    GameScene.prototype.onEnter = function() {
      this.image = new Image();
      this.image.onload = this.onLoad;
      this.image.src = "./img/map.png";
    };

    GameScene.prototype.onLoad = function() {
      var canvas, context, imageData;
      canvas = document.createElement('canvas');
      canvas.width = this.image.width;
      canvas.height = this.image.height;
      context = canvas.getContext('2d');
      context.width = this.image.width;
      context.height = this.image.height;
      context.drawImage(this.image, 0, 0);
      imageData = context.getImageData(0, 0, this.image.width, this.image.height);
      Game.stage = this.stage;
      Game.instance.initWithData(imageData.data, this.image.width, this.image.height);
      StoryManager.instance.init();
      return StoryManager.instance.start();
    };

    return GameScene;

  })(AScene);

  LoadScene = (function(_super) {
    __extends(LoadScene, _super);

    LoadScene.prototype.image = null;

    LoadScene.prototype.map = null;

    function LoadScene(stage) {
      this.onSoundLoaded = __bind(this.onSoundLoaded, this);
      this.onAssetsLoaded = __bind(this.onAssetsLoaded, this);
      LoadScene.__super__.constructor.call(this, stage);
      return;
    }

    LoadScene.prototype.onEnter = function() {
      var assetsToLoader, loader;
      assetsToLoader = ["./fonts/Number.fnt"];
      loader = new PIXI.AssetLoader(assetsToLoader);
      loader.onComplete = this.onAssetsLoaded;
      loader.load();
    };

    LoadScene.prototype.onAssetsLoaded = function() {
      if (!window.IS_CHROME) {
        SceneTraveler.getInstance().travelTo(new GameScene(this.stage));
        return;
      }
      this.urlList = ["./sounds/construction.mp3", "./sounds/explosion.mp3", "./sounds/loop.mp3", "./sounds/victory.mp3", "./sounds/gameover.mp3", "./sounds/attack01.mp3", "./sounds/attack02.mp3", "./sounds/attack03.mp3", "./sounds/attack04.mp3", "./sounds/attack05.mp3", "./sounds/attack06.mp3", "./sounds/attack07.mp3", "./sounds/attack08.mp3", "./sounds/attack00.mp3"];
      this.soundLoader = new BufferLoader(SoundManager.instance.context, this.urlList, this.onSoundLoaded);
      this.soundLoader.load();
    };

    LoadScene.prototype.onSoundLoaded = function() {
      var gainNode, i, source, _i, _j, _ref;
      for (i = _i = 0, _ref = this.urlList.length; _i < _ref; i = _i += 1) {
        SoundManager.instance.add(this.soundLoader.bufferList[i], this.urlList[i]);
      }
      source = SoundManager.instance.play("./sounds/loop.mp3", true, "loop");
      source.disconnect(0);
      gainNode = SoundManager.instance.context.createGain();
      gainNode.connect(SoundManager.instance.context.destination);
      gainNode.gain.value = 0;
      source.connect(gainNode);
      SoundManager.instance.addGain(gainNode, "loop");
      TweenLite.to(gainNode.gain, 3, {
        value: .4
      });
      for (i = _j = 0; _j <= 8; i = _j += 1) {
        source = SoundManager.instance.getSource("./sounds/attack0" + i + ".mp3");
      }
      return SceneTraveler.getInstance().travelTo(new GameScene(this.stage));
    };

    return LoadScene;

  })(AScene);

  SceneTraveler = (function() {
    var instance;

    function SceneTraveler() {
      this.onTransitionInComplete = __bind(this.onTransitionInComplete, this);
      this.onTransitionOutComplete = __bind(this.onTransitionOutComplete, this);
      this.travelTo = __bind(this.travelTo, this);
    }

    SceneTraveler.prototype.currentScene = null;

    SceneTraveler.prototype.nextScene = null;

    SceneTraveler.prototype.transitioning = false;

    instance = null;

    SceneTraveler.getInstance = function() {
      if (instance == null) {
        instance = new SceneTraveler();
      }
      return instance;
    };

    SceneTraveler.prototype.travelTo = function(scene) {
      this.nextScene = scene;
      if (this.currentScene !== null) {
        this.currentScene.transitionOut(this.onTransitionOutComplete);
      } else {
        this.onTransitionOutComplete();
      }
    };

    SceneTraveler.prototype.onTransitionOutComplete = function() {
      if (this.currentScene !== null) {
        this.currentScene.onExit();
        this.currentScene.dispose();
      }
      this.currentScene = this.nextScene;
      this.currentScene.onEnter();
      this.currentScene.transitionIn(this.onTransitionInComplete);
      this.nextScene = null;
    };

    SceneTraveler.prototype.onTransitionInComplete = function() {};

    return SceneTraveler;

  })();

  StartScene = (function(_super) {
    __extends(StartScene, _super);

    StartScene.prototype.line = null;

    StartScene.prototype.instruction = null;

    StartScene.prototype.graphic = null;

    function StartScene(stage) {
      this.calculateDistance = __bind(this.calculateDistance, this);
      this.onComplete = __bind(this.onComplete, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      StartScene.__super__.constructor.call(this, stage);
      return;
    }

    StartScene.prototype.onEnter = function() {
      this.line = new PIXI.Sprite(PIXI.Texture.fromImage("./img/01_line.png"));
      this.line.position.x = 50;
      this.line.position.y = 70;
      this.instruction = new PIXI.Sprite(PIXI.Texture.fromImage("./img/01_text.png"));
      this.instruction.position.x = 30;
      this.stage.addChild(this.line);
      this.stage.addChild(this.instruction);
      DisplayController.instance.display(0, 0, 300, 200, 0, false);
      this.graphic = new PIXI.Graphics();
      this.graphic.position.x = 0;
      this.graphic.position.y = 0;
      this.stage.addChild(this.graphic);
      this.stage.mousedown = this.onMouseDown;
    };

    StartScene.prototype.onMouseDown = function(mouseData) {
      var pos,
        _this = this;
      this.points = [];
      this.graphic.clear();
      this.graphic.alpha = 1;
      pos = mouseData.global;
      this.points.push({
        x: pos.x,
        y: pos.y
      });
      this.stage.mousemove = function(mouseData) {
        var p, _i, _len, _ref;
        pos = mouseData.global;
        _this.points.push({
          x: pos.x,
          y: pos.y
        });
        _this.points = simplify(_this.points, 1, false);
        _this.graphic.clear();
        _this.graphic.lineStyle(2, 0xFFFFFF, 1);
        _this.graphic.moveTo(_this.points[0].x, _this.points[0].y);
        _ref = _this.points;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _this.graphic.lineTo(p.x, p.y);
          _this.graphic.moveTo(p.x, p.y);
        }
        if (_this.calculateDistance() > 250) {
          return _this.onEnd();
        }
      };
      this.stage.mouseup = function(mousedata) {
        if (_this.calculateDistance() > 200) {
          return _this.onEnd();
        } else {
          _this.stage.mouseup = null;
          _this.stage.mousemove = null;
          return TweenLite.to(_this.graphic, .4, {
            alpha: 0
          });
        }
      };
    };

    StartScene.prototype.onEnd = function() {
      console.log("end");
      this.stage.mousedown = null;
      TweenLite.to(this.line, .5, {
        alpha: 0
      });
      TweenLite.to(this.instruction, .5, {
        alpha: 0
      });
      TweenLite.to(this.graphic, .7, {
        alpha: 0,
        onComplete: this.onComplete
      });
      this.stage.mouseup = null;
      this.stage.mousemove = null;
    };

    StartScene.prototype.onComplete = function() {
      $("#container").css({
        width: "0px",
        height: "0px"
      });
      $(".gameRenderer").css({
        left: "-375px",
        top: "-143px"
      });
      SceneTraveler.getInstance().travelTo(new LoadScene(this.stage));
    };

    StartScene.prototype.calculateDistance = function() {
      var d, distance, i, p, p2, _i, _ref;
      distance = 0;
      if (this.points.length >= 2) {
        for (i = _i = 1, _ref = this.points.length; _i < _ref; i = _i += 1) {
          p = this.points[i];
          p2 = this.points[i - 1];
          d = Math.abs(p.x - p2.x) + Math.abs(p.y - p2.y);
          if (!isNaN(d)) {
            distance += d;
          }
        }
      }
      return distance;
    };

    return StartScene;

  })(AScene);

  Test01 = (function(_super) {
    __extends(Test01, _super);

    Test01.prototype.thing = null;

    Test01.prototype.points = null;

    function Test01(stage) {
      Test01.__super__.constructor.call(this, stage);
      return;
    }

    Test01.prototype.onEnter = function() {
      var _this = this;
      this.sample = new PIXI.Graphics();
      this.sample.lineStyle(2, 0xFFFFFF, .05);
      this.sample.moveTo(50, 250);
      this.sample.lineTo(150, 50);
      this.sample.lineTo(250, 250);
      this.sample.lineTo(50, 250);
      this.sample.lineStyle(2, 0xFFFFFF, .05);
      this.sample.moveTo(25, 275);
      this.sample.lineTo(275, 275);
      this.sample.lineTo(275, 25);
      this.sample.lineTo(25, 25);
      this.sample.lineTo(25, 275);
      this.stage.addChild(this.sample);
      this.graphic = new PIXI.Graphics();
      this.graphic.position.x = 0;
      this.graphic.position.y = 0;
      this.stage.addChild(this.graphic);
      return this.stage.mousedown = function(mouseData) {
        var pos;
        _this.points = [];
        _this.graphic.clear();
        pos = mouseData.global;
        _this.points.push({
          x: pos.x,
          y: pos.y
        });
        _this.stage.mousemove = function(mouseData) {
          var p, _i, _len, _ref, _results;
          pos = mouseData.global;
          _this.points.push({
            x: pos.x,
            y: pos.y
          });
          _this.points = simplify(_this.points, 1, false);
          _this.graphic.clear();
          _this.graphic.lineStyle(2, 0xFFFFFF, 1);
          _this.graphic.moveTo(_this.points[0].x, _this.points[0].y);
          _ref = _this.points;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _this.graphic.lineTo(p.x, p.y);
            _results.push(_this.graphic.moveTo(p.x, p.y));
          }
          return _results;
        };
        return _this.stage.mouseup = function(mousedata) {
          var p, _i, _j, _len, _len1, _ref, _ref1;
          _this.graphic.clear();
          _this.graphic.lineStyle(2, 0xFFFFFF, .8);
          _this.corners = findCorner(_this.points);
          _ref = _this.corners;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _this.graphic.moveTo(p.x, p.y);
            _this.graphic.drawCircle(p.x, p.y, 5);
          }
          if (isTriangle(_this.corners)) {
            $("#test").html("triangle");
          } else if (isSquare(_this.corners)) {
            $("#test").html("square");
          } else {
            $("#test").html("shape not recognize : try pyramid or square :)");
          }
          _this.graphic.moveTo(_this.points[0].x, _this.points[0].y);
          _ref1 = _this.points;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p = _ref1[_j];
            _this.graphic.lineTo(p.x, p.y);
            _this.graphic.moveTo(p.x, p.y);
          }
          _this.stage.mouseup = null;
          return _this.stage.mousemove = null;
        };
      };
    };

    return Test01;

  })(AScene);

  HitTest = (function() {
    function HitTest() {
      return;
    }

    HitTest.testCircle = function(position, object, radius) {
      var dist, dx, dy;
      if (radius == null) {
        radius = object.radius;
      }
      dx = object.position.x - position.x;
      dy = object.position.y - position.y;
      dist = Math.sqrt(dx * dx + dy * dy);
      return dist <= radius;
    };

    HitTest.testElipse = function(position, object, width, height) {
      var dx, dy;
      dx = object.position.x - position.x;
      dy = object.position.y - position.y;
      return ((dx * dx) / (width * width)) + ((dy * dy) / (height * height)) <= 1.0;
    };

    HitTest.testRect = function(position, object) {
      return position.x >= object.position.x && position.y >= object.position.y && position.x <= object.position.x + object.width && position.y <= object.position.y + object.height;
    };

    HitTest.testRect = function(position, object, centred) {
      position.x += object.width / 2;
      position.y += object.height / 2;
      return HitTest.testRect(position, object);
    };

    return HitTest;

  })();

  TAN_HALF_PI = Math.tan(Math.PI / 2);

  vector = function(x, y) {
    return {
      x: x,
      y: y
    };
  };

  delta = function(a, b) {
    return vector(a.x - b.x, a.y - b.y);
  };

  angle = function(d) {
    return Math.atan((1.0 * d.y) / d.x);
  };

  angle_between = function(a, b) {
    return Math.acos((a.x * b.x + a.y * b.y) / (len(a) * len(b)));
  };

  len = function(v) {
    return Math.sqrt(v.x * v.x + v.y * v.y);
  };

  add = function(a, b) {
    return vector(a.x + b.x, a.y + b.y);
  };

  average = function(l) {
    var i, x, y;
    x = 0;
    y = 0;
    i = 0;
    while (i < l.length) {
      x += l[i].x;
      y += l[i].y;
      i++;
    }
    return vector(x / l.length, y / l.length);
  };

  findCorner = function(line) {
    var ac, c, c2, corners, d, i, lastCorner, pt, _i, _j, _ref, _ref1;
    corners = [line[0]];
    lastCorner = line[0];
    for (i = _i = 1, _ref = line.length - 1; _i < _ref; i = _i += 1) {
      pt = line[i];
      d = delta(lastCorner, pt);
      if (Math.abs(len(d)) > 10) {
        ac = delta(pt, line[i + 1]);
        if (Math.abs(angle_between(ac, d)) > Math.PI / 4) {
          pt.index = i;
          corners.push(pt);
          lastCorner = pt;
        }
      }
    }
    corners.push(line[line.length - 1]);
    for (i = _j = 1, _ref1 = corners.length; _j <= _ref1; i = _j += 1) {
      c = corners[i % corners.length];
      c2 = corners[i - 1];
      if ((Math.abs(c.x - c2.x) + Math.abs(c.y - c2.y)) < 30) {
        corners.splice(i - 1, 1);
        break;
      }
    }
    return corners;
  };

  isTriangle = function(corners) {
    var c0, c1, c2;
    if (corners.length !== 3) {
      return false;
    }
    corners.sort(function(a, b) {
      return a.x < b.x;
    });
    c0 = corners[0];
    c1 = corners[1];
    c2 = corners[2];
    if (c0.y > c1.y && c2.y > c1.y) {
      return true;
    }
    return false;
  };

  isSquare = function(corners) {
    var c0, c1, c2, c3, tolerance;
    if (corners.length !== 4) {
      return false;
    }
    corners.sort(function(a, b) {
      return a.x < b.x;
    });
    if (corners[0].y < corners[1].y) {
      c0 = corners[0];
      corners[0] = corners[1];
      corners[1] = c0;
    }
    if (corners[2].y < corners[3].y) {
      c2 = corners[2];
      corners[2] = corners[3];
      corners[3] = c2;
    }
    c0 = corners[0];
    c1 = corners[1];
    c2 = corners[2];
    c3 = corners[3];
    tolerance = 25;
    if (Math.abs(c0.x - c1.x) < tolerance && Math.abs(c2.x - c3.x) < tolerance) {
      return true;
    }
    return false;
  };

  NumberUtils = (function() {
    function NumberUtils() {
      throw new Error("you can t create an instance of NumberUtils");
    }

    NumberUtils.addZero = function(string, minLenght) {
      string += "";
      while (string.length < minLenght) {
        string = "0" + string;
      }
      return string;
    };

    return NumberUtils;

  })();

  ObjectPool = (function() {
    function ObjectPool(create, minSize, maxSize) {
      var _i, _ref;
      this.create = create;
      this.minSize = minSize;
      this.maxSize = maxSize;
      this.list = [];
      for (_i = 0, _ref = this.minSize; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
        this.add();
      }
    }

    ObjectPool.prototype.add = function() {
      return this.list.push(this.create());
    };

    ObjectPool.prototype.checkOut = function() {
      var i;
      if (this.list.length === 0) {
        return i = this.create();
      } else {
        return i = this.list.pop();
      }
    };

    ObjectPool.prototype.checkIn = function(item) {
      if (this.list.length < this.maxSize) {
        return this.list.push(item);
      }
    };

    return ObjectPool;

  })();

}).call(this);
